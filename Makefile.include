###
### generic GNU make Makefile for .tex -> .pdf.
### ransford at cs.washington.edu
###   http://github.com/ransford/pdflatex-makefile
###
### Recommended usage:
###   1. echo 'include Makefile.include' > Makefile
###   2. Optional: Edit the Makefile to override $(TARGET)
###      and anything else (e.g., PDFVIEWER, AFTERALL)
###   3. $ make snapshot
###      # pass around a draft...
###   4. $ make distill
###      # submit the camera-ready version with embedded fonts
###
### Final result:
###   % cat Makefile
###   TARGET=mypaper
###   PDFVIEWER=open -a 'Adobe Acrobat Professional'
###   AFTERALL=mypostprocessingstep
###   include Makefile.include
###
###   mypostprocessingstep:
###           # do something...
###

PDFLATEX	?= pdflatex -halt-on-error -file-line-error -shell-escape
BIBTEX		?= bibtex
MAKEGLOSSARIES 	?= makeglossaries

## String to find in log to check whether rerun is necessary
RERUN_PATTERN = Rerun to

ifneq ($(QUIET),)
PDFLATEX	+= -interaction=batchmode
ERRFILTER	:= > /dev/null || (egrep ':[[:digit:]]+:' *.log && false)
BIBTEX		+= -terse
else
PDFLATEX	+= -interaction=nonstopmode
ERRFILTER=
endif

## Action for 'make view'
ifeq ($(OS),Windows_NT)
  PDFVIEWER	?= start
else
  OS=$(shell uname -s)
  ifeq ($(OS),Darwin)
    PDFVIEWER	?= open
  else
    PDFVIEWER	?= xdg-open
  endif
endif

## Name of the target file, minus .pdf: e.g., TARGET=mypaper causes this
## Makefile to turn mypaper.tex into mypaper.pdf.
TARGETS += $(TARGET)
TEXTARGETS = $(TARGETS:=.tex)
PDFTARGETS = $(TARGETS:=.pdf)
AUXFILES   = $(TARGETS:=.aux)
LOGFILES   = $(TARGETS:=.log)

## Inkscape SVG file processing:
ifeq ($(shell which inkscape >/dev/null 2>&1 && echo USING_INKSCAPE),USING_INKSCAPE)
  FIG_SVG=$(wildcard $(FIGS)/*.svg)
  FIG_PDF=$(FIG_SVG:.svg=.pdf)
else
  FIG_PDF=
endif

## If $(TARGET).tex refers to .bib files like \bibliography{foo,bar}, then
## $(BIBFILES) will contain foo.bib and bar.bib, and both files will be added as
## dependencies to $(PDFTARGETS).
## Effect: updating a .bib file will trigger re-typesetting.
BIBFILES += $(patsubst %,%.bib,\
		$(shell grep '^[^%]*\\bibliography{' $(TEXTARGETS) | \
			grep -o '\\bibliography{[^}]\+}' | \
			sed -e 's/^[^%]*\\bibliography{\([^}]*\)}.*/\1/' \
			    -e 's/, */ /g'))

## Add \input'ed or \include'd files to $(PDFTARGETS) dependencies; ignore
## .tex extensions.
INCLUDEDTEX = $(patsubst %,%.tex,\
		$(shell grep '^[^%]*\\\(input\|include\){' $(TEXTARGETS) | \
			grep -o '\\\(input\|include\){[^}]\+}' | \
			sed -e 's/^.*{\([^}]*\)}.*/\1/' \
			    -e 's/\.tex$$//'))

AUXFILES += $(INCLUDEDTEX:.tex=.aux)

# .PHONY names all targets that aren't filenames
.PHONY: all clean pdf view distill distclean

all: pdf $(AFTERALL)

ifeq ($(shell which inkscape >/dev/null 2>&1 && echo USING_INKSCAPE),USING_INKSCAPE)
$(FIGS)/%.pdf: $(FIGS)/%.svg  ## Figures for the manuscript
	inkscape -C -z --file=$< --export-pdf=$@ 2> /dev/null
endif

pdf: $(FIG_PDF) $(PDFTARGETS)

view: $(PDFTARGETS)
	$(PDFVIEWER) $(PDFTARGETS)

# to generate aux but not pdf from pdflatex, use -draftmode
%.aux: %.tex $(REVDEPS)
	$(PDFLATEX) -draftmode $* $(ERRFILTER)

# introduce BibTeX dependency if we found a \bibliography
ifneq ($(strip $(BIBFILES)),)
BIBDEPS = %.bbl
%.bbl: %.aux $(BIBFILES)
	$(BIBTEX) $*
endif

# introduce makeglossaries dependency if we found \printglossary/ies
HAS_GLOSSARIES = $(shell \
		grep '^[^%]*\\printglossar\(ies\|y\)' $(TEXTARGETS) $(INCLUDEDTEX) && \
		echo HAS_GLOSSARIES)
ifneq ($(HAS_GLOSSARIES),)
GLSDEPS = %.gls
%.gls: %.aux
	$(MAKEGLOSSARIES) $(TARGETS)
endif

$(PDFTARGETS): %.pdf: %.tex %.aux $(GLSDEPS) $(BIBDEPS) $(INCLUDEDTEX) $(REVDEPS)
	$(PDFLATEX) $* $(ERRFILTER)
ifneq ($(strip $(BIBFILES)),)
	@if egrep -q "undefined (references|citations)" $*.log; then \
		$(BIBTEX) $* && $(PDFLATEX) $* $(ERRFILTER); fi
endif
	@while grep -q "$(RERUN_PATTERN)" $*.log; do \
		$(PDFLATEX) $* $(ERRFILTER); done

%.distilled.pdf: %.pdf
	gs -q -dSAFER -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=$@ \
	   -dAutoFilterColorImages=false -dColorImageFilter=/FlateEncode \
	   -dAutoFilterGrayImages=false -dGrayImageFilter=/FlateEncode \
	   -dAutoFilterMonoImages=false -dMonoImageFilter=/CCITTFaxEncode \
	   -dCompatibilityLevel=1.5 -dPDFSETTINGS=/prepress -c .setpdfwrite -f $<

distill: $(PDFTARGETS:.pdf=.distilled.pdf)

distclean: clean
	$(RM) $(PDFTARGETS) $(PDFTARGETS:.pdf=.distilled.pdf) $(EXTRADISTCLEAN)

clean:
	$(RM) $(foreach T,$(TARGETS), \
		$(T).bbl $(T).bcf $(T).bit $(T).blg \
		$(T)-blx.bib $(T).brf $(T).glg $(T).glo \
		$(T).gls $(T).glsdefs $(T).glx \ $(T).gxg \
		$(T).gxs $(T).idx $(T).ilg $(T).ind \
		$(T).ist $(T).loa $(T).lof $(T).lol \
		$(T).lot $(T).maf $(T).mtc $(T).nav \
		$(T).out $(T).pag $(T).run.xml $(T).snm \
		$(T).svn $(T).tdo $(T).tns $(T).toc \
		$(T).vtc $(T).url $(T).synctex.gz \
		$(T).cb $(T).cb2) \
		$(REVDEPS) $(AUXFILES) $(LOGFILES) \
		$(EXTRACLEAN) $(FIG_PDF)
